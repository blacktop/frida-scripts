/*
 * Auto-generated by Frida. Please modify to match the signature of _ZN7WebCore36standardUserAgentWithApplicationNameERKN3WTF6StringES3_NS_13UserAgentTypeE.
 * This stub is currently auto-generated from manpages when available.
 *
 * For full API reference, see: https://frida.re/docs/javascript-api/
 */
{
  /**
   * Called synchronously when about to call _ZN7WebCore36standardUserAgentWithApplicationNameERKN3WTF6StringES3_NS_13UserAgentTypeE.
   *
   * @this {object} - Object allowing you to store state for use in onLeave.
   * @param {function} log - Call this function with a string to be presented to the user.
   * @param {array} args - Function arguments represented as an array of NativePointer objects.
   * For example use args[0].readUtf8String() if the first argument is a pointer to a C string encoded as UTF-8.
   * It is also possible to modify arguments by assigning a NativePointer object to an element of this array.
   * @param {object} state - Object allowing you to keep state across function calls.
   * Only one JavaScript function will execute at a time, so do not worry about race-conditions.
   * However, do not use this to store function arguments across onEnter/onLeave, but instead
   * use "this" which is an object for keeping state local to an invocation.
   */
  onEnter(log, args, state) {
    log('_ZN7WebCore36standardUserAgentWithApplicationNameERKN3WTF6StringES3_NS_13UserAgentTypeE() [WebCore]');
    var readWtfString = function(str) {
      const impl = str.readPointer();
      if (impl == 0x0)
        return 'null';   
      const m_refCount = Memory.readU32(impl);
      const m_length = Memory.readU32(impl.add(4));
      const m_data = Memory.readPointer(impl.add(4 * 2));
      console.log(`[args] m_refCount: ${m_refCount}, m_length: ${m_length}, m_data: ${m_data}`)
      if (m_length > 0) {
        console.log(hexdump(impl), {
            offset: 0,
            length: 16,
            header: true,
            ansi: true
        });           
        console.log(hexdump(m_data), {
            offset: 0,
            length: m_length,
            header: true,
            ansi: true
        });        
        return m_data.readUtf8String();
      }
      return "";
    }    
    const applicationName = readWtfString(args[0]);
    const userAgentOSVersion = readWtfString(args[1]);
    const type = args[2];
    log(`standardUserAgentWithApplicationName(applicationName: ${applicationName}, userAgentOSVersion: ${userAgentOSVersion}, type: ${type});`);
    log('\tBacktrace:\n\t' + Thread.backtrace(this.context, Backtracer.ACCURATE).map(DebugSymbol.fromAddress).join('\n\t'));
  },

  /**
   * Called synchronously when about to return from _ZN7WebCore36standardUserAgentWithApplicationNameERKN3WTF6StringES3_NS_13UserAgentTypeE.
   *
   * See onEnter for details.
   *
   * @this {object} - Object allowing you to access state stored in onEnter.
   * @param {function} log - Call this function with a string to be presented to the user.
   * @param {NativePointer} retval - Return value represented as a NativePointer object.
   * @param {object} state - Object allowing you to keep state across function calls.
   */
  onLeave(log, retval, state) {
    var readWtfString = function(impl) {
      if (impl == 0x0)
        return 'null';   
      const m_refCount = Memory.readU32(impl);
      const m_length = Memory.readU32(impl.add(4));
      const m_data = Memory.readPointer(impl.add(4 * 2));
      console.log(`[args] m_refCount: ${m_refCount}, m_length: ${m_length}, m_data: ${m_data}`)
      if (m_length > 0) {
        console.log(hexdump(impl), {
            offset: 0,
            length: 16,
            header: true,
            ansi: true
        });           
        console.log(hexdump(m_data), {
            offset: 0,
            length: m_length,
            header: true,
            ansi: true
        });        
        return m_data.readUtf8String();
      }
      return "";
    }       
        log(`[onLeave]\tretval: ${retval}, string: ${readWtfString(ptr(retval))}`);
      //   log(`[onLeave]\tretval: ${retval}`);
      //   log(hexdump(retval), {
      //     offset: 0,
      //     length: 16,
      //     header: true,
      //     ansi: true
      // });           
  }
}
